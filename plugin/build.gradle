apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'
apply plugin: 'maven-publish'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'idea'

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    jcenter()
    maven {
        url 'http://repo.jenkins-ci.org/releases/'
    }
}

sourceSets {
    functionalTest {
        groovy {
            srcDir 'src/functionalTest/groovy'
        }
        resources {
            srcDir 'src/functionalTest/resources'
        }
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.4'
    compile 'org.jenkins-ci.plugins:job-dsl-core:1.45'
    compile 'org.jenkins-ci:version-number:1.1'
    compile('org.codehaus.groovy.modules.http-builder:http-builder:0.7.2') {
        exclude(module: 'groovy')
        exclude(module: 'xercesImpl')
    }

    testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude(module: 'groovy-all')
    }

    functionalTestCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude(module: 'groovy-all')
    }
}

idea {
    module {
        scopes.TEST.plus += [ configurations.functionalTestCompile ]
    }
}

task functionalTest(type: Test) {
    group = 'verification'
    description = 'Runs the functional tests.'
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    reports.html.destination = file("${buildDir}/reports/functionalTests")
}

check.dependsOn functionalTest

gradlePlugin {
    testSourceSets sourceSets.functionalTest

    plugins {
        jobDslPlugin {
            id = 'com.here.jobdsl'
            implementationClass = 'com.here.gradle.plugins.jobdsl.JobDslPlugin'
        }
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier 'sources'
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    from groovydoc.destinationDir
    classifier = 'groovydoc'
}

def pomConfig = {
    licenses {
        license {
            name 'HERE Proprietary'
            url 'https://legal.here.com/'
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId project.properties['maven.groupId']
            artifactId project.properties['maven.artifactId']

            if (System.env['BUILD_NUMBER']) {
                version "${project.properties['maven.version']}.${System.env['BUILD_NUMBER']}"
            } else {
                version project.properties['maven.version']
            }

            from components.java

            artifact sourceJar
            artifact groovydocJar

            pom.withXml {
                asNode().children().last() + {
                    def root = asNode()
                    root.children().last() + pomConfig
                }
            }
        }
    }

    repositories {
        maven {
            url "${buildDir}/repo"
        }
    }
}
