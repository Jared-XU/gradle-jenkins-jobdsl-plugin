apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'
apply plugin: 'maven-publish'

ext {
    jenkinsVersion = '2.71'
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    jcenter()
    maven {
        url 'http://repo.jenkins-ci.org/releases/'
    }
}

configurations {
    jenkinsPlugins {
        description 'Dependencies on Jenkins plugins that are used in functional tests.'
    }
}

sourceSets {
    functionalTest {
        groovy {
            srcDir 'src/functionalTest/groovy'
        }
        resources {
            srcDir 'src/functionalTest/resources'
        }
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

dependencies {
    compile localGroovy()
    compile('org.jenkins-ci.plugins:job-dsl-core:1.64') {
        exclude(module: 'groovy-all')
    }
    compile 'org.jenkins-ci:version-number:1.4'

    compile('org.codehaus.groovy.modules.http-builder:http-builder:0.7.2') {
        exclude(module: 'groovy')
        exclude(module: 'xercesImpl')
    }

    testCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
        exclude(module: 'groovy-all')
    }

    functionalTestCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
        exclude(module: 'groovy-all')
    }

    functionalTestCompile ("org.jenkins-ci.main:jenkins-war:${jenkinsVersion}") {
        exclude(module: 'groovy-all')
    }

    functionalTestCompile 'org.jenkins-ci.main:jenkins-test-harness:2.23'
    functionalTestCompile "org.jenkins-ci.main:jenkins-war:${jenkinsVersion}"
    functionalTestCompile 'org.jenkins-ci.plugins:cloudbees-folder:6.1.0@jar'

    // Plugins to be available for single tests using the @WithPlugin annotation.
    jenkinsPlugins 'org.jenkins-ci.plugins:cloudbees-folder:6.1.0'
    jenkinsPlugins 'org.jenkins-ci.plugins:gradle:1.22' // Old version used to test reporting of outdated plugins.
    jenkinsPlugins 'org.jenkins-ci.plugins:gitlab-plugin:1.4.5' // Used to test reporting of deprecated plugins.
}

task resolveTestPlugins(type: Copy) {
    from configurations.jenkinsPlugins
    into new File(sourceSets.functionalTest.output.resourcesDir, 'plugins')
    include '*.hpi'
    include '*.jpi'

    doLast {
        def baseNames = source.collect { it.name.take(it.name.lastIndexOf('.')) }
        new File(destinationDir, 'index') << baseNames.join('\n')
    }
}

task functionalTest(type: Test, dependsOn: resolveTestPlugins) {
    group = 'verification'
    description = 'Runs the functional tests.'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    reports.html.destination = file("${buildDir}/reports/functionalTests")

    // Set build directory for Jenkins test harness, see https://issues.jenkins-ci.org/browse/JENKINS-26331.
    systemProperty 'buildDirectory', project.buildDir.absolutePath
    systemProperty 'hudson.Main.development', 'true'
}

check.dependsOn functionalTest

gradlePlugin {
    testSourceSets sourceSets.functionalTest

    plugins {
        jobDslPlugin {
            id = 'com.here.jobdsl'
            implementationClass = 'com.here.gradle.plugins.jobdsl.JobDslPlugin'
        }
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier 'sources'
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    from groovydoc.destinationDir
    classifier = 'groovydoc'
}

def pomConfig = {
    licenses {
        license {
            name 'Apache-2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0'
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId project.properties['maven.groupId']
            artifactId project.properties['maven.artifactId']
            version project.properties['maven.version']

            from components.java

            artifact sourceJar
            artifact groovydocJar

            pom.withXml {
                asNode().children().last() + {
                    def root = asNode()
                    root.children().last() + pomConfig
                }
            }
        }
    }

    repositories {
        maven {
            url "${buildDir}/repo"
        }
    }
}
